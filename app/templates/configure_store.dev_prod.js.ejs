/**
 * configureStore for development purposes. This file is responsible for adding developer tools to the current build
 * and detecting whether or not the dev tools are available from within the browser e.g. Redux Devtools. This file
 * also takes into account hot module reloading (hmr for short) so the store reducers can be overwriittern on the fly.
 *
 * NOTE:
 * If you make changes to functionality in this file, make sure to make those changes in the development
 * (configure_store.prod.js) file as well.
 */

import { createStore, applyMiddleware, compose } from 'redux';
<%if (!isProd) {-%>
import createLogger from 'redux-logger';
<%}-%>
import rootReducer from './root_reducer';
import window from 'window';
<%if (appConfig.usesThunks) {-%>
import thunk from 'redux-thunk';
<%}-%>

// Check to see if there's redux dev tools
const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;

export default function configureStore(initialState) {
  const store = createStore(
    rootReducer,
    initialState,
    composeEnhancers(
    <%if (appConfig.usesThunks || !isProd) {-%>
      applyMiddleware(
     <%if (appConfig.usesThunks) {-%>
      thunk,
     <%}-%>
      <%if (!isProd) {-%>
      createLogger(),
      <%}-%>
    ),
    <%}-%>
    ),
  );

<%if (!isProd) {-%>
  if (module.hot) {
      // Enable Webpack hot module replacement for reducers
      module.hot.accept('./root_reducer', () => {
      const nextRootReducer = require('./root_reducer').default;
      store.replaceReducer(nextRootReducer);
    });
  }
<%}%>

  return store;
}
